= C++ database interface

dbic++ is a Perl DBI style database client library abstraction which comes with support for
the following databases.

* PostgreSQL >= 8.0
* MySQL      >= 5.0

I'm working on drivers for the following, which will be available soon.

* SQLite >= 3

== Main Features

* Simple API to maximize cross database support.
* Supports nested transactions.
* Auto reconnect, re-prepare & execute statements again unless inside a transaction.
* Provides APIs for async queries and a simple reactor API built on libevent.

== Examples

=== C++

  #include "dbic++.h"
  #include <unistd.h>

  using namespace std;
  using namespace dbi;

  int main() {

      // Handle h ("driver", "user", "password", "database", "host", "port");
      Handle h ("postgresql", getlogin(), "", "dbicpp");

      Statement st (h, "SELECT id, name, email FROM users WHERE id >= ? AND id < ?");

      // bind and execute the statement.
      st % 1L, 10L;
      st.execute();

      ResultRow r;
      while (r = st.fetchRow())
          cout << r.join("\t") << endl;

      // or you can do
      st.rewind();
      ResultRowHash rh;
      while (rh = st.fetchRowHash())
          cout << rh["id"]    << "\t"
               << rh["name"]  << "\t"
               << rh["email"] << endl;

      st.finish();
  }

See src/example.cc for more specific examples.

=== Ruby

You need to install the swift gem. It includes ruby bindings to dbicpp and also
includes a funky thin ORM.


  require 'swift'
  require 'etc'

  Swift.setup user: Etc.getlogin, driver: 'postgresql', db: 'dbicpp'
  Swift.trace true

  Swift.db do
    st = prepare "select id, name, email from users where id > ? AND id < ?"

    st.execute(0, 10) do |row|
      puts row.values_at(:id, :name, :email).join("\t")
    end

    # Named save point.
    transaction 'delete_stuff' do
      execute "delete from users where id = ?", 2
      begin
        # UUID save point.
        transaction do
          execute "delete from users"
          raise "changed my mind"
        end
      rescue => e
        # nop
        p e
      end
    end

    st.execute(0, 10) do |row|
      puts row.values_at(:id, :name, :email).join("\t")
    end
  end


== INSTALL

=== Local Install

  ./build

=== Debian packages

  ./build -d
  sudo dpkg -i ../dbicpp*.deb

== Benchmarks

You can run these yourself. Just create a database called 'dbicpp' and
a user 'udbicpp' on your local MySQL and PostgreSQL server.

  cd bench/
  make clean
  ./benchmarks.rb

The following results were obtained on a Core2DUO 2.53GHz, 4GB, 5200rpm drive
with stock database configs.

  mysql
  =====
                                      user     system      total        real
  ruby: do                        3.350000   0.110000   3.460000 (  4.431064)
  ruby: swift                     1.080000   0.110000   1.190000 (  1.905136)
  c: libmysqlclient               0.000000   0.000000   0.230000 (  0.933122)
  c++: libdbic++                  0.000000   0.010000   0.510000 (  1.163342)
  ruby: mysql2                    2.150000   0.040000   2.190000 (  3.155557)
  c++: libmysql++                 0.000000   0.000000   0.480000 (  1.437604)

  postgresql
  ==========
                                      user     system      total        real
  ruby: do                        3.470000   0.130000   3.600000 (  4.583538)
  ruby: swift                     1.300000   0.070000   1.370000 (  2.010762)
  ruby: libpq                     1.800000   0.120000   1.920000 (  2.815204)
  c++: libdbic++                  0.000000   0.000000   0.560000 (  1.336096)
  c: libpq                        0.010000   0.000000   0.510000 (  1.085639)


  â€  swift does not do typecasting at the adapter level. Typecasting is done
    if you use the ORM.

== TODO

=== Database Features

* cursor support, function calls and a lot more.

=== Distribution

* upload stuff to ppa .

== LICENSE

See LICENSE.

== Warning

I'm no C++ or Ruby expert. So the code may have horrendous, hideous or outdated code/coding style. If
you are lucky, you may not encounter any bugs. So suffice to say, if you have any comments,
suggestions or patches they're very much welcome.

The project is under heavy development and is not production ready. Use it at your own risk.
