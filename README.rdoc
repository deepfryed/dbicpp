= C++ database interface

dbic++ is a Perl DBI style database client library abstraction which comes with support for
the following databases.

* PostgreSQL >= 8.0
* MySQL      >= 5.0

I'm working on drivers for the following, which will be available soon.

* SQLite >= 3

== Main Features

* Simple API to maximize cross database support.
* Supports nested transactions.
* Auto reconnect, re-prepare & execute statements again unless inside a transaction.
* Provides APIs for async queries and a simple reactor API built on libevent.

== Examples

=== C++

  #include "dbic++.h"
  #include <unistd.h>

  using namespace std;
  using namespace dbi;

  int main() {

      // Handle h ("driver", "user", "password", "database", "host", "port");
      Handle h ("postgresql", getlogin(), "", "dbicpp");

      Statement st (h, "SELECT id, name, email FROM users WHERE id >= ? AND id < ?");

      // bind and execute the statement.
      st % 1L, 10L;
      st.execute();

      ResultRow r;
      while (r = st.fetchRow())
          cout << r.join("\t") << endl;

      // or you can do
      st.rewind();
      ResultRowHash rh;
      while (rh = st.fetchRowHash())
          cout << rh["id"]    << "\t"
               << rh["name"]  << "\t"
               << rh["email"] << endl;

      st.finish();
  }

See src/example.cc for more specific examples.

=== Ruby

You need to install swift (http://github.com/shanna/swift), it includes ruby bindings for
dbic++.

  require 'swift'
  require 'etc'

  Swift.setup :default, Swift::DB::Postgres, db: 'dbicpp'
  Swift.trace true

  Swift.db do |db|
    st = db.prepare "select id, name, email from users where id > ? AND id < ?"

    st.execute(0, 10) do |row|
      puts row.values_at(:id, :name, :email).join("\t")
    end

    # Named save point.
    db.transaction :delete_stuff
      db.execute "delete from users where id = ?", 2
      begin
        # UUID save point.
        db.transaction do
          db.execute "delete from users"
          raise "changed my mind"
        end
      rescue => e
        # nop
        p e
      end
    end

    st.execute(0, 10) do |row|
      puts row.values_at(:id, :name, :email).join("\t")
    end
  end


== INSTALL

=== Dependencies

If you are building from source you need to install a few dependencies before
you compile dbic++. To begin with you need a working build environment with a
c++ compiler (XCode if you are a MacOSX user).

==== Debian or other flavors of linux.

* cmake (cmake)
* pcre3 development libraries (libpcre3-dev)
* uuid development libraries (uuid-dev)
* mysql client libraries (libmysqlclient-dev)
* postgresql client libraries (libpq-dev)
* libevent development libraries (libevent-dev)

If you need to build debian packages yourself, you may need the following in addition.

* cdbs (cdbs)
* debhelper (debhelper)
* devscripts (devscripts)

==== MacOSX

You need to install the required dependencies first,

    sudo port install cmake
    sudo port install libevent
    sudo port install pcre
    sudo port install postgresql84
    sudo port install mysql5 +server

You don't need both database ports if you only want to test or work with one of them.

=== Local install

    ./build

=== System wide install

    sudo ./build -i

=== Cleanup and uninstall

    ./build -c
    sudo ./build -u

=== Debian packages

To build debian packages for your local architecture,

  ./build -d

It is recommended that for debian based distributions you use the builds from my
ppa repository at https://launchpad.net/~deepfryed/+archive/ppa.

Add the following to /etc/apt/sources.list, run apt-get update as root and you should
be able to install the latest packages.

    deb http://ppa.launchpad.net/deepfryed/ppa/ubuntu lucid main
    deb-src http://ppa.launchpad.net/deepfryed/ppa/ubuntu lucid main

=== Running the demo

A c++ example lives in src/examples/demo.cc. You can run it as,

    ./demo [mysql|postgresql]

=== Populating MySQL time zone tables.

On most unix systems it can be done as,

  mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql

Refer to http://dev.mysql.com/doc/refman/5.1/en/mysql-tzinfo-to-sql.html.

== Benchmarks

You can run these yourself. Just create a database called 'dbicpp' on your
local MySQL and PostgreSQL server.

  cd bench/
  make clean
  ./benchmarks.rb

The following results were obtained on a Core2DUO 2.53GHz, 4GB, 5200rpm drive
with stock database configs.

  * The dataset size is 50 rows of ~64 bytes each.
  * 5000 "select * from ..." run back to back, fetching all rows and printing them.

  mysql
  =====
                                      user     system      total        real
  ruby: do                        3.350000   0.110000   3.460000 (  4.431064)
  ruby: swift                     1.080000   0.110000   1.190000 (  1.905136)
  c: libmysqlclient               0.000000   0.000000   0.230000 (  0.933122)
  c++: libdbic++                  0.000000   0.010000   0.510000 (  1.163342)
  ruby: mysql2                    2.150000   0.040000   2.190000 (  3.155557)
  c++: libmysql++                 0.000000   0.000000   0.480000 (  1.437604)

  postgresql
  ==========
                                      user     system      total        real
  ruby: do                        3.470000   0.130000   3.600000 (  4.583538)
  ruby: swift                     1.300000   0.070000   1.370000 (  2.010762)
  ruby: libpq                     1.800000   0.120000   1.920000 (  2.815204)
  c++: libdbic++                  0.000000   0.000000   0.560000 (  1.336096)
  c: libpq                        0.010000   0.000000   0.510000 (  1.085639)


== TODO

=== Features

* Cursor support, generic interface to database specific api.

== LICENSE

See LICENSE.

== Warning

I'm no C++ or Ruby expert. So the code may have horrendous, hideous or outdated code/coding style. If
you are lucky, you may not encounter any bugs. So suffice to say, if you have any comments,
suggestions or patches they're very much welcome.

The project is under heavy development and is not production ready. Use it at your own risk.
